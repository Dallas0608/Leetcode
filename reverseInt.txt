// 先看看字符串逆序 
// in-place reverse   原地逆序意味着不允额外分配空间
// 很简单，直接分配一个与原字符串等长的字符数组，然后反向拷贝一下即可。

//1、设置两个指针，分别指向字符串的头部和尾部，然后交换两个指针所指的字符，并向中间移动指针直到交叉。
//2、用递归的方式，需要给定逆序的区间
 对字符串s在区间left和right之间进行逆序，递归法
void Reverse( char* s, int left, int right )
{
    if(left >= right)
        return;

    char t = s[left] ;
    s[left] = s[right] ;
    s[right] = t ;

    Reverse(s, left + 1, right - 1) ;
}
//3、非递归法，同样指定逆序区间，和方法一没有本质区别，一个使用指针，一个使用下标。
//这三种方法都使用了中间变量

//不使用临时变量
//使用异或操作
char* reversal(char* src)
{
	char *start = src;
    char *end = start + ( strlen(src) - 1 ) ;
    
    while (start < end)
    {
 
       *start = *start ^ *end;
       *end = *start ^ *end;
       *start = *end ^ *start;
        start ++;
        end --; 
	}  
	return src;
}
//这个异或操作的原理为：
//a = a ^ b;  //语句1
  b = a ^ b;  //语句2
  a = b ^ a;  //语句3
（1）一个变量按位异或自己的结果为0，即：a ^ a = 0；
（2）一个变量按位异或0的结果为自己，即：a ^ 0 = a；
//于是，在上面的三条语句中，语句1可以看做把变量a、b保存到a的存储空间中（当然这只是一种理解方式）；
//语句2消去了b（原理1），于是剩下了a（原理2），赋值到b的存储空间，此刻，b变量已经得到了a的值；
语句3中，原本a变量存储空间内已经同时保存了a、b，此刻，b已经变成了a，
//所以两个按位异或后，便消去了a（原理1），只剩下了b（原理2），将它赋值给a，至此，交换变量的过程结束。



// 对整数进行取余数和取每一位数，得判决是否overflow，再倒回去
class Solution{
public:
	int reverse(int x){
		int rev=0;
		while(x!=0)
		{
			int pop=x%10;
			x/=10;
			if(rev>INT_MAX/10 || (rev==INT_MAX/10 && pop>7)) 
				return 0;
			if(rev<INT_MIN/10 || (rev==INT_MIN/10 && pop<-8))
				return 0;
			rev = rev*10+pop;
		}
		return rev;		
	}
};
//这里的INT_MAX、INT_MIN 是C++内置的宏定义 还要其他类型的
//查看是否移除 范围在[-2^31,2^31-1] 
//为什么范围是这样的 四个字节 第一bit是符号位 
//例如 1111 1111 无符号为 2^0+2^1+……+2^7=2^8-1=256  0111 1111 = 2^7-1
//所以四字节的 int 自然为[-2^31,2^31-1]  